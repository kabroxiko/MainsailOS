# This file contains pin mappings for the Artillery Genius Pro (2022)
# with a Artillery_Ruby-v1.2 board. To use this config, during "make menuconfig"
# select the STM32F401 with "No bootloader" and USB (on PA11/PA12)
# communication.

# To flash this firmware, set the physical bridge between +3.3V and Boot0 PIN
# on Artillery_Ruby mainboard. Then run the command:
#   make flash FLASH_DEVICE=/dev/serial/by-id/usb-Klipper_stm32f401xc_*-if00

# See docs/Config_Reference.md for a description of parameters.

[include mainsail-alt.cfg]
[include fd-macros/*.cfg]
[include fd-macros-example.cfg]
[include macros.cfg]

[extruder]
max_extrude_only_distance: 700.0
step_pin: PA7
dir_pin: PA6
enable_pin: !PC4
microsteps: 16
rotation_distance: 7.1910
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
min_temp: 0
max_temp: 250

[stepper_x]
step_pin: !PB14
dir_pin: PB13
enable_pin: !PB15
microsteps: 16
rotation_distance: 40
endstop_pin: !PA2
position_endstop: 0
position_max: 220
homing_speed: 60

[stepper_y]
step_pin: PB10
dir_pin: PB2
enable_pin: !PB12
microsteps: 16
rotation_distance: 40
endstop_pin: !PA1
position_endstop: 0
position_max: 220
homing_speed: 60

[stepper_z]
step_pin: PB0
dir_pin: !PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_max: 250
position_min: -5

[heater_bed]
heater_pin: PA8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: 0
max_temp: 130

[bed_screws]
screw1: 40,40
screw1_name: front left
screw2: 180,40
screw2_name: front right
screw3: 180,180
screw3_name: back right
screw4: 40,180
screw4_name: back left
speed: 100.0

[screws_tilt_adjust]
screw1: 12,54
screw1_name: front left
screw2: 152,54
screw2_name: front right
screw3: 12,192
screw3_name: back left
screw4: 152,192
screw4_name: back right
speed: 100.0
screw_thread: CW-M5

[fan]
pin: PC8
off_below: 0.1

[heater_fan hotend_fan]
pin: PC7
heater: extruder
heater_temp: 50.0

[controller_fan stepper_fan]
pin: PC6
idle_timeout: 300

[idle_timeout]
# timeout: 60
# gcode:
#   {% if printer.pause_resume.is_paused %}
#     SET_GCODE_VARIABLE MACRO=_FD_RESUME VARIABLE=last_extruder_temp VALUE="{printer.extruder.target}"

#     M117 Idle timeout, hotend cooldown
#     RESPOND TYPE=echo_no_space MSG="Idle timeout, hotend cooldown"

#     M104 S0  # cooldown the hotend
#   {% else %}
#     M117 Idle timeout, poweroff!!!
#     RESPOND TYPE=echo_no_space MSG="Idle timeout, poweroff"
#     _POWER_OFF_PRINTER
#   {% endif %}

[mcu]
serial: /dev/serial/by-id/usb-Prolific_Technology_Inc._USB-Serial_Controller-if00-port0
# serial: /dev/serial/by-id/usb-Klipper_stm32f401xc_0C00430009504E3755343220-if00
# serial: /dev/ttyS2
baud: 250000
restart_method: command

[mcu opi]
serial: /tmp/klipper_host_mcu

[adxl345]
cs_pin: opi:None
spi_bus: spidev1.0

[resonance_tester]
accel_chip: adxl345
probe_points:
    137, 140, 20  # an example

# [input_shaper]
# #shaper_freq_x:46
# #shaper_freq_x:53
# shaper_freq_x:36.86
# shaper_freq_y:45
# shaper_type:mzv

[gcode_macro _POWER_ON_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="on")}

[gcode_macro _POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 4000
minimum_cruise_ratio: 0.5
max_z_velocity: 50
square_corner_velocity: 5.0
max_z_accel: 100

[bltouch]
sensor_pin: PC2
control_pin: PC3
x_offset:27.25
y_offset:-12.8
speed:10
samples:1
samples_result:average

[bed_mesh]
speed: 800
mesh_min: 30, 20
mesh_max: 210, 200
probe_count: 5,5
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.2
move_check_distance: 3.0
split_delta_z: .010
fade_start: 1.0
fade_end: 5.0

[safe_z_home]
home_xy_position: 110,110
speed: 200
z_hop: 10
z_hop_speed: 10

[pause_resume]

[neopixel statusled]
pin: PB7
color_order: GRB
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0

[filament_switch_sensor filament_sensor]
pause_on_runout: true
runout_gcode: PAUSE
insert_gcode: RESUME
switch_pin: opi:gpiochip0/gpio1

[output_pin _FILAMENT_ON]
pin: !opi:gpiochip1/gpio3
value: 1
shutdown_value: 0

[gcode_macro SET_FILAMENT_SENSOR]
rename_existing: SET_FILAMENT_SENSOR_OLD
gcode:
  {% set VALUE = params.ENABLE | default(0) | int %}
  SET_PIN PIN=_FILAMENT_ON VALUE={VALUE}
  SET_FILAMENT_SENSOR_OLD {rawparams}

[gcode_button LCD_BUTTON_PRESS]
pin: !opi:gpiochip1/gpio2
press_gcode:
 RESTART

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 20.940
#*# pid_ki = 1.050
#*# pid_kd = 104.440
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 41.962
#*# pid_ki = 0.413
#*# pid_kd = 1066.883
#*#
#*# [bltouch]
#*# z_offset = 1.900
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	-0.155000, -0.135000, -0.130000, -0.152500, -0.100000
#*# 	-0.092500, -0.050000, -0.085000, -0.052500, -0.102500
#*# 	-0.027500, -0.020000, 0.010000, -0.022500, 0.000000
#*# 	-0.012500, 0.007500, 0.015000, -0.020000, 0.097500
#*# 	-0.110000, -0.025000, -0.017500, -0.032500, 0.062500
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 30.0
#*# max_x = 210.0
#*# min_y = 20.0
#*# max_y = 200.0
